name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  PYTHON_VERSION: "3.11"
  
jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    services:
      mongodb:
        image: mongo:7
        env:
          MONGO_INITDB_ROOT_USERNAME: admin
          MONGO_INITDB_ROOT_PASSWORD: password
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.adminCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('services/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
          
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r services/requirements.txt
        
    - name: Set up test environment
      run: |
        export PYTHONPATH="${PYTHONPATH}:$(pwd)/services:$(pwd)"
        echo "PYTHONPATH=${PYTHONPATH}:$(pwd)/services:$(pwd)" >> $GITHUB_ENV
        
    - name: Run tests with pytest
      env:
        APP_ENV: test
        SECRET_KEY: test-secret-key-for-ci
        MASTER_KEY: test-master-key-for-ci-32-chars
        MONGO_URI: mongodb://admin:password@localhost:27017
        MONGO_DB: saft_doctor_test
        LOG_LEVEL: ERROR
      run: |
        cd services
        python -m pytest ../tests/ -v --tb=short
        
    - name: Run tests with coverage
      env:
        APP_ENV: test
        SECRET_KEY: test-secret-key-for-ci
        MASTER_KEY: test-master-key-for-ci-32-chars
        MONGO_URI: mongodb://admin:password@localhost:27017
        MONGO_DB: saft_doctor_test
        LOG_LEVEL: ERROR
      run: |
        cd services
        python -m pytest ../tests/ --cov=. --cov-report=xml --cov-report=html
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./services/coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

  lint:
    name: Code Quality
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install linting tools
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black isort mypy
        
    - name: Run flake8
      run: |
        flake8 services/ core/ saft-pt-doctor/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 services/ core/ saft-pt-doctor/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Run black (code formatting)
      run: |
        black --check --diff services/ core/ saft-pt-doctor/
        
    - name: Run isort (import sorting)
      run: |
        isort --check-only --diff services/ core/ saft-pt-doctor/

  security:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
        
    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety
        
    - name: Run Bandit (security linter)
      run: |
        bandit -r services/ core/ saft-pt-doctor/ -f json -o bandit-report.json
        
    - name: Run Safety (dependency security check)
      run: |
        safety check --json --output safety-report.json || true

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, lint]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Build Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./services
        file: ./services/Dockerfile
        platforms: linux/amd64,linux/arm64
        push: false
        tags: saft-doctor:${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop'
    environment: staging
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to staging
      run: |
        echo "ðŸš€ Deploying to staging environment..."
        # Add your deployment script here
        echo "Deployment completed!"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Deploy to production
      run: |
        echo "ðŸš€ Deploying to production environment..."
        # Add your production deployment script here
        echo "Production deployment completed!"

  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Create Release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: v${{ github.run_number }}
        release_name: Release v${{ github.run_number }}
        body: |
          Changes in this Release:
          - Automated release from main branch
          - Commit: ${{ github.sha }}
        draft: false
        prerelease: false